{"name":"Cdnlysis","tagline":"Save Cloudfront logs to a time series database.","body":"cdnlysis\r\n========\r\n\r\nCDNlysis syncs Amazon Cloudfront log entries from S3 bucket and streams them to multiple database backends. As of now it writes to InfluxDB & MongoDB (turned off by default).\r\nYou can later use Influx Querying API to do anaylsis or use Grafana to generate awesome graphs.\r\n\r\nYou can use this for:\r\n* Understanding how the Bandwidth is being used.\r\n* Finding out the most popular and most downloadable content.\r\n* Generate trends for your most popular Videos, Audios, Slides etc.\r\n* Understand geographical behaviour of the Requests.\r\n* Amount of Bytes transferred to & fro the Cloudfront distributions.\r\n* Find out the most profitable referrer from where your content is being accessed.\r\netc.\r\n\r\n# Features\r\n* CDNlysis resumes a sync operation from the last processed file.\r\n* CDN logs are saved as gzip files in S3, CDNlysis downloads, unzips, parses and feeds this to InfluxDB.\r\n* It iteratively walks over your historical logFiles too.\r\n* CDNlysis converts the time provided in the log entries as the actual time of saved records. This ensures consistency in expctations and data delivered.\r\n* CDNlysis works not only over Amazon Cloudfront but anything that complies with W3C Extended Log Format (http://www.w3.org/TR/WD-logfile.html).\r\n* CDNlysis can write to either InfluxDB, MongoDB or both.\r\n\r\n# Usage\r\nInstalling CDNlysis is dirt easy, just make sure you have latest Go installed and follow these steps:\r\nIn the checkout directory\r\n\r\n```\r\nmake deps\r\n```\r\nShould install all the dependencies for you.\r\n\r\n```\r\nmake build\r\n```\r\nshould generate a binary for you to execute.\r\n\r\n# Configuration\r\n\r\nUse the newly created binary to generate help\r\n\r\n```\r\npiyush:cdnlysis [dev] $ ./cdnlysis\r\n  -config=\"\": Config [.ini format] file to Load the configurations from\r\n  -prefix=\"\": Directory prefix to process the logs for\r\n```\r\n\r\n-config should be a path to a valid configuration file which can have 4 sections.\r\n * Backends: Quick access switch for the enabled Backends.\r\n * Influx: Influx configuration.\r\n * Mongo: Mongo configuration.\r\n * SyncProgress: CDNlysis' internal database. The path must be changed to something more permanent. This will help you prevent from feeding redundant entries to your Influx database.\r\n * S3: AWS configurations. Prefix is the prefix/directory in which logs should be searched.\r\n\r\nA sample configuration file looks like this:\r\n\r\n```\r\n[Backends]\r\nInflux=true\r\nMongo=false\r\n\r\n[Influx]\r\nHost=\"127.0.0.1:8086\"\r\nUsername=root\r\nPassword=root\r\nIsUDP=true\r\nDatabase=cdn_logs\r\n\r\n[Mongo]\r\nHost=\"127.0.0.1:27017\"\r\nUsername=\"\"\r\nPassword=\"\"\r\nDatabase=\"cdn_logs\"\r\nCollection=\"cdn\"\r\n\r\n[SyncProgress]\r\nPath=\"/tmp/cdn_sync_progress\"\r\n\r\n[S3]\r\nPrefix = \"\"\r\nAccessKey = \"\"\r\nSecretKey = \"\"\r\nBucket = \"\"\r\nRegion = \"us-east-1\"\r\n```\r\n\r\nOptionally, you can also provide -prefix as a Command Line Argument, by which you can run multiple sync jobs corresponding to each directory.\r\n\r\n# Execute\r\nJust provide the config path and an optional prefix. Sit back and let the tool do the rest.\r\n\r\n```\r\n./cdnlysis -config=/Users/piyush/dev/conf/cdn-analysis.cfg -prefix=plain\r\n```\r\n\r\n# Screenshots\r\n![Screenshot1](https://cloud.githubusercontent.com/assets/580782/4833122/f1baa26a-5fa1-11e4-919e-261f46cec2b0.png)\r\n![Screenshot2](https://cloud.githubusercontent.com/assets/580782/4833123/f1bb5002-5fa1-11e4-910c-35a4845843e0.png)\r\n![Screenshot3](https://cloud.githubusercontent.com/assets/580782/4833124/f1eff384-5fa1-11e4-99a3-b35876566ccd.png)\r\n","google":"UA-56232710-1","note":"Don't delete this file! It's used internally to help with page regeneration."}